"use strict";(self.webpackChunkcraco_website=self.webpackChunkcraco_website||[]).push([[850],{3905:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>f});var i=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,i,o=function(e,n){if(null==e)return{};var t,i,o={},a=Object.keys(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=i.createContext({}),p=function(e){var n=i.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},s=function(e){var n=p(e.components);return i.createElement(c.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},d=i.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),d=p(t),f=o,m=d["".concat(c,".").concat(f)]||d[f]||u[f]||a;return t?i.createElement(m,r(r({ref:n},s),{},{components:t})):i.createElement(m,r({ref:n},s))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,r=new Array(a);r[0]=d;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l.mdxType="string"==typeof e?e:o,r[1]=l;for(var p=2;p<a;p++)r[p]=t[p];return i.createElement.apply(null,r)}return i.createElement.apply(null,t)}d.displayName="MDXCreateElement"},8572:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>u,frontMatter:()=>a,metadata:()=>l,toc:()=>p});var i=t(7462),o=(t(7294),t(3905));const a={description:"Setting up the configuration file"},r="Getting Started",l={unversionedId:"configuration/getting-started",id:"configuration/getting-started",title:"Getting Started",description:"Setting up the configuration file",source:"@site/docs/configuration/getting-started.md",sourceDirName:"configuration",slug:"/configuration/getting-started",permalink:"/docs/configuration/getting-started",draft:!1,editUrl:"https://github.com/dilanx/craco/tree/main/website/docs/configuration/getting-started.md",tags:[],version:"current",frontMatter:{description:"Setting up the configuration file"},sidebar:"docs",previous:{title:"Configuration",permalink:"/docs/category/configuration"},next:{title:"Style",permalink:"/docs/configuration/style"}},c={},p=[{value:"Creating the file",id:"creating-the-file",level:2},{value:"Setting a custom location",id:"setting-a-custom-location",level:3},{value:"Option 1: package.json (recommended)",id:"option-1-packagejson-recommended",level:4},{value:"Option 2: CLI (for backward compatibility)",id:"option-2-cli-for-backward-compatibility",level:4},{value:"Configuration tips",id:"configuration-tips",level:2},{value:"Object literals and functions",id:"object-literals-and-functions",level:3},{value:"Context object (<code>{ env, paths }</code>)",id:"context-object--env-paths-",level:3},{value:"Override modes",id:"override-modes",level:3},{value:"Configuration helpers",id:"configuration-helpers",level:2},{value:"when",id:"when",level:3},{value:"<code>when(condition, fn, [unmetValue])</code>",id:"whencondition-fn-unmetvalue",level:4},{value:"<code>whenDev(condition, fn, [unmetValue])</code>",id:"whendevcondition-fn-unmetvalue",level:4},{value:"<code>whenProd(condition, fn, [unmetValue])</code>",id:"whenprodcondition-fn-unmetvalue",level:4},{value:"<code>whenTest(condition, fn, [unmetValue])</code>",id:"whentestcondition-fn-unmetvalue",level:4},{value:"Exporting your configuration",id:"exporting-your-configuration",level:2},{value:"Object literal",id:"object-literal",level:3},{value:"Function",id:"function",level:3},{value:"Promise or Async Function",id:"promise-or-async-function",level:3},{value:"Using a custom <code>react-scripts</code> package",id:"using-a-custom-react-scripts-package",level:2}],s={toc:p};function u(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,i.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"getting-started"},"Getting Started"),(0,o.kt)("h2",{id:"creating-the-file"},"Creating the file"),(0,o.kt)("p",null,"CRACO can be configured in a file with any of the following names:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"craco.config.ts")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"craco.config.js")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"craco.config.cjs")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"cracorc.ts")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"cracorc.js")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},".cracorc"))),(0,o.kt)("p",null,"If multiple configuration files are found, CRACO will use the one highest on the list above. You can also ","[specify a file path in your ",(0,o.kt)("inlineCode",{parentName:"p"},"package.json")," file]",", which will take priority over all files listed above."),(0,o.kt)("h3",{id:"setting-a-custom-location"},"Setting a custom location"),(0,o.kt)("h4",{id:"option-1-packagejson-recommended"},"Option 1: package.json (recommended)"),(0,o.kt)("p",null,"You can change the location of your config file by specifying a value for ",(0,o.kt)("inlineCode",{parentName:"p"},"cracoConfig")," in your ",(0,o.kt)("inlineCode",{parentName:"p"},"package.json")," file."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="package.json"',title:'"package.json"'},'{\n  "cracoConfig": "config/craco-config-with-custom-name.js"\n}\n')),(0,o.kt)("h4",{id:"option-2-cli-for-backward-compatibility"},"Option 2: CLI (for backward compatibility)"),(0,o.kt)("p",null,"You can change the location of your config file by specifying a file path with the ",(0,o.kt)("inlineCode",{parentName:"p"},"--config")," CLI option."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="package.json"',title:'"package.json"'},'{\n  "scripts": {\n    "start": "craco start --config config/craco-config-with-custom-name.js"\n  }\n}\n')),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"The CLI option doesn't support Babel with Jest.")),(0,o.kt)("h2",{id:"configuration-tips"},"Configuration tips"),(0,o.kt)("h3",{id:"object-literals-and-functions"},"Object literals and functions"),(0,o.kt)("p",null,"Many config override properties in the CRACO config can be assigned either one of two things:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"an ",(0,o.kt)("strong",{parentName:"p"},"object literal"),", which will be merged with the original config"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="craco.config.js (example)"',title:'"craco.config.js','(example)"':!0},"module.exports = {\n  webpack: {\n    configure: {\n      entry: './path/to/my/entry/file.js',\n    },\n  },\n};\n"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"a ",(0,o.kt)("strong",{parentName:"p"},"function")," that takes in the original config as the first argument (and optionally a ",(0,o.kt)("a",{parentName:"p",href:"#context-object--env-paths-"},"context object"),") and returns the new config"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="craco.config.js (example)"',title:'"craco.config.js','(example)"':!0},"module.exports = {\n  webpack: {\n    configure: (webpackConfig, { env, paths }) => {\n      webpackConfig.entry = './path/to/my/entry/file.js';\n      return webpackConfig;\n    },\n  },\n};\n")))),(0,o.kt)("p",null,"Configuration outlines within this documentation will show both of these options as two properties with the same name (for example, two properties named ",(0,o.kt)("inlineCode",{parentName:"p"},"configure")," where one is an object literal and the other is a function)."),(0,o.kt)("h3",{id:"context-object--env-paths-"},"Context object (",(0,o.kt)("inlineCode",{parentName:"h3"},"{ env, paths }"),")"),(0,o.kt)("p",null,"The function version of config override properties accepts an optional second argument, which is a single object containing the following properties:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"env")," - the current NODE_ENV (development, production, etc.)"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"paths")," - an object that contains all the paths used by CRA")),(0,o.kt)("p",null,"Some configuration sections, like ",(0,o.kt)("a",{parentName:"p",href:"/docs/configuration/jest#jestconfigure"},(0,o.kt)("inlineCode",{parentName:"a"},"jest.configure"))," and ",(0,o.kt)("a",{parentName:"p",href:"/docs/configuration/devserver#devserver-1"},(0,o.kt)("inlineCode",{parentName:"a"},"devServer")),", include extra properties in their context object."),(0,o.kt)("h3",{id:"override-modes"},"Override modes"),(0,o.kt)("p",null,"Some sections have a ",(0,o.kt)("inlineCode",{parentName:"p"},"mode")," property, which can be assigned one of two values:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"extends")," - the provided configuration will extend the CRA settings (",(0,o.kt)("strong",{parentName:"li"},"default"),")"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"file")," - the CRA settings will be reset and you'll need to provide an official configuration file for the plugin that will supersede any settings")),(0,o.kt)("h2",{id:"configuration-helpers"},"Configuration helpers"),(0,o.kt)("h3",{id:"when"},"when"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="craco.config.js (example)"',title:'"craco.config.js','(example)"':!0},"module.exports = {\n  eslint: {\n    mode: ESLINT_MODES.file,\n    configure: {\n      formatter: when(\n        process.env.NODE_ENV === 'CI',\n        require('eslint-formatter-vso')\n      ),\n    },\n  },\n  webpack: {\n    plugins: [\n      new ConfigWebpackPlugin(),\n      ...whenDev(() => [new CircularDependencyPlugin()], []),\n    ],\n  },\n};\n")),(0,o.kt)("h4",{id:"whencondition-fn-unmetvalue"},(0,o.kt)("inlineCode",{parentName:"h4"},"when(condition, fn, [unmetValue])")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"when<T>(condition: boolean, fn: () => T, unmetValue?: T): T | undefined")),(0,o.kt)("p",null,"If ",(0,o.kt)("inlineCode",{parentName:"p"},"condition")," evaluates to true, ",(0,o.kt)("inlineCode",{parentName:"p"},"fn")," is called and the helper will return what that function returns. If false, ",(0,o.kt)("inlineCode",{parentName:"p"},"unmetValue")," will be returned (or ",(0,o.kt)("inlineCode",{parentName:"p"},"undefined")," if not provided)."),(0,o.kt)("h4",{id:"whendevcondition-fn-unmetvalue"},(0,o.kt)("inlineCode",{parentName:"h4"},"whenDev(condition, fn, [unmetValue])")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"whenDev<T>(fn: () => T, unmetValue?: T): T | undefined")),(0,o.kt)("p",null,"Equivalent to ",(0,o.kt)("inlineCode",{parentName:"p"},"when(process.env.NODE_ENV === 'development', fn, unmetValue)"),"."),(0,o.kt)("h4",{id:"whenprodcondition-fn-unmetvalue"},(0,o.kt)("inlineCode",{parentName:"h4"},"whenProd(condition, fn, [unmetValue])")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"whenProd<T>(fn: () => T, unmetValue?: T): T | undefined")),(0,o.kt)("p",null,"Equivalent to ",(0,o.kt)("inlineCode",{parentName:"p"},"when(process.env.NODE_ENV === 'production', fn, unmetValue)"),"."),(0,o.kt)("h4",{id:"whentestcondition-fn-unmetvalue"},(0,o.kt)("inlineCode",{parentName:"h4"},"whenTest(condition, fn, [unmetValue])")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"whenTest<T>(fn: () => T, unmetValue?: T): T | undefined")),(0,o.kt)("p",null,"Equivalent to ",(0,o.kt)("inlineCode",{parentName:"p"},"when(process.env.NODE_ENV === 'test', fn, unmetValue)"),"."),(0,o.kt)("h2",{id:"exporting-your-configuration"},"Exporting your configuration"),(0,o.kt)("p",null,"You can export your configuration in a variety of ways."),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"The function options will be called with an object containing the current environment variables (for example, ",(0,o.kt)("inlineCode",{parentName:"p"},"NODE_ENV"),").")),(0,o.kt)("h3",{id:"object-literal"},"Object literal"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="craco.config.js"',title:'"craco.config.js"'},"module.exports = {\n  ...\n};\n")),(0,o.kt)("h3",{id:"function"},"Function"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="craco.config.js"',title:'"craco.config.js"'},"module.exports = function ({ env }) {\n  return {\n    ...\n  };\n};\n")),(0,o.kt)("h3",{id:"promise-or-async-function"},"Promise or Async Function"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="craco.config.js"',title:'"craco.config.js"'},"module.exports = async function ({ env }) {\n  await ...;\n\n  return {\n    ...\n  };\n};\n")),(0,o.kt)("h2",{id:"using-a-custom-react-scripts-package"},"Using a custom ",(0,o.kt)("inlineCode",{parentName:"h2"},"react-scripts")," package"),(0,o.kt)("p",null,"If you're using a fork of Create React App's ",(0,o.kt)("inlineCode",{parentName:"p"},"react-scripts")," package, you can specify the name in your configuration so CRACO knows where the scripts are. If this property is omitted, CRACO defaults to ",(0,o.kt)("inlineCode",{parentName:"p"},"react-scripts"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="craco.config.js"',title:'"craco.config.js"'},"module.exports = {\n  // ...\n  reactScriptsVersion: 'custom-react-scripts-package',\n};\n")))}u.isMDXComponent=!0}}]);